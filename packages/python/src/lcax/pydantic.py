# generated by datamodel-codegen:
#   filename:  lcax.schema.json

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class BuildingModelScope(Enum):
    facilitating_works = 'facilitating_works'
    substructure = 'substructure'
    superstructure_frame = 'superstructure_frame'
    superstructure_envelope = 'superstructure_envelope'
    superstructure_internal_elements = 'superstructure_internal_elements'
    finishes = 'finishes'
    building_services = 'building_services'
    external_works = 'external_works'
    ff_e = 'ff_e'


class BuildingType(Enum):
    new_construction_works = 'new_construction_works'
    demolition = 'demolition'
    deconstruction_and_new_construction_works = (
        'deconstruction_and_new_construction_works'
    )
    retrofit_works = 'retrofit_works'
    extension_works = 'extension_works'
    retrofit_and_extension_works = 'retrofit_and_extension_works'
    fit_out_works = 'fit_out_works'
    operations = 'operations'
    other = 'other'


class BuildingTypology(Enum):
    office = 'office'
    residential = 'residential'
    public = 'public'
    commercial = 'commercial'
    industrial = 'industrial'
    infrastructure = 'infrastructure'
    agricultural = 'agricultural'
    other = 'other'


class Classification(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: str
    name: str
    system: str


class Country(Enum):
    unknown = 'unknown'
    afg = 'afg'
    ala = 'ala'
    alb = 'alb'
    dza = 'dza'
    asm = 'asm'
    and_ = 'and'
    ago = 'ago'
    aia = 'aia'
    ata = 'ata'
    atg = 'atg'
    arg = 'arg'
    arm = 'arm'
    abw = 'abw'
    aus = 'aus'
    aut = 'aut'
    aze = 'aze'
    bhs = 'bhs'
    bhr = 'bhr'
    bgd = 'bgd'
    brb = 'brb'
    blr = 'blr'
    bel = 'bel'
    blz = 'blz'
    ben = 'ben'
    bmu = 'bmu'
    btn = 'btn'
    bol = 'bol'
    bes = 'bes'
    bih = 'bih'
    bwa = 'bwa'
    bvt = 'bvt'
    bra = 'bra'
    iot = 'iot'
    brn = 'brn'
    bgr = 'bgr'
    bfa = 'bfa'
    bdi = 'bdi'
    cpv = 'cpv'
    khm = 'khm'
    cmr = 'cmr'
    can = 'can'
    cym = 'cym'
    caf = 'caf'
    tcd = 'tcd'
    chl = 'chl'
    chn = 'chn'
    cxr = 'cxr'
    cck = 'cck'
    col = 'col'
    com = 'com'
    cog = 'cog'
    cod = 'cod'
    cok = 'cok'
    cri = 'cri'
    civ = 'civ'
    hrv = 'hrv'
    cub = 'cub'
    cuw = 'cuw'
    cyp = 'cyp'
    cze = 'cze'
    dnk = 'dnk'
    dji = 'dji'
    dma = 'dma'
    dom = 'dom'
    ecu = 'ecu'
    egy = 'egy'
    slv = 'slv'
    gnq = 'gnq'
    eri = 'eri'
    est = 'est'
    swz = 'swz'
    eth = 'eth'
    flk = 'flk'
    fro = 'fro'
    fji = 'fji'
    fin = 'fin'
    fra = 'fra'
    guf = 'guf'
    pyf = 'pyf'
    atf = 'atf'
    gab = 'gab'
    gmb = 'gmb'
    geo = 'geo'
    deu = 'deu'
    gha = 'gha'
    gib = 'gib'
    grc = 'grc'
    grl = 'grl'
    grd = 'grd'
    glp = 'glp'
    gum = 'gum'
    gtm = 'gtm'
    ggy = 'ggy'
    gin = 'gin'
    gnb = 'gnb'
    guy = 'guy'
    hti = 'hti'
    hmd = 'hmd'
    vat = 'vat'
    hnd = 'hnd'
    hkg = 'hkg'
    hun = 'hun'
    isl = 'isl'
    ind = 'ind'
    idn = 'idn'
    irn = 'irn'
    irq = 'irq'
    irl = 'irl'
    imn = 'imn'
    isr = 'isr'
    ita = 'ita'
    jam = 'jam'
    jpn = 'jpn'
    jey = 'jey'
    jor = 'jor'
    kaz = 'kaz'
    ken = 'ken'
    kir = 'kir'
    prk = 'prk'
    kor = 'kor'
    kwt = 'kwt'
    kgz = 'kgz'
    lao = 'lao'
    lva = 'lva'
    lbn = 'lbn'
    lso = 'lso'
    lbr = 'lbr'
    lby = 'lby'
    lie = 'lie'
    ltu = 'ltu'
    lux = 'lux'
    mac = 'mac'
    mdg = 'mdg'
    mwi = 'mwi'
    mys = 'mys'
    mdv = 'mdv'
    mli = 'mli'
    mlt = 'mlt'
    mhl = 'mhl'
    mtq = 'mtq'
    mrt = 'mrt'
    mus = 'mus'
    myt = 'myt'
    mex = 'mex'
    fsm = 'fsm'
    mda = 'mda'
    mco = 'mco'
    mng = 'mng'
    mne = 'mne'
    msr = 'msr'
    mar = 'mar'
    moz = 'moz'
    mmr = 'mmr'
    nam = 'nam'
    nru = 'nru'
    npl = 'npl'
    nld = 'nld'
    ncl = 'ncl'
    nzl = 'nzl'
    nic = 'nic'
    ner = 'ner'
    nga = 'nga'
    niu = 'niu'
    nfk = 'nfk'
    mkd = 'mkd'
    mnp = 'mnp'
    nor = 'nor'
    omn = 'omn'
    pak = 'pak'
    plw = 'plw'
    pse = 'pse'
    pan = 'pan'
    png = 'png'
    pry = 'pry'
    per = 'per'
    phl = 'phl'
    pcn = 'pcn'
    pol = 'pol'
    prt = 'prt'
    pri = 'pri'
    qat = 'qat'
    reu = 'reu'
    rou = 'rou'
    rus = 'rus'
    rwa = 'rwa'
    blm = 'blm'
    shn = 'shn'
    kna = 'kna'
    lca = 'lca'
    maf = 'maf'
    spm = 'spm'
    vct = 'vct'
    wsm = 'wsm'
    smr = 'smr'
    stp = 'stp'
    sau = 'sau'
    sen = 'sen'
    srb = 'srb'
    syc = 'syc'
    sle = 'sle'
    sgp = 'sgp'
    sxm = 'sxm'
    svk = 'svk'
    svn = 'svn'
    slb = 'slb'
    som = 'som'
    zaf = 'zaf'
    sgs = 'sgs'
    ssd = 'ssd'
    esp = 'esp'
    lka = 'lka'
    sdn = 'sdn'
    sur = 'sur'
    sjm = 'sjm'
    swe = 'swe'
    che = 'che'
    syr = 'syr'
    twn = 'twn'
    tjk = 'tjk'
    tza = 'tza'
    tha = 'tha'
    tls = 'tls'
    tgo = 'tgo'
    tkl = 'tkl'
    ton = 'ton'
    tto = 'tto'
    tun = 'tun'
    tur = 'tur'
    tkm = 'tkm'
    tca = 'tca'
    tuv = 'tuv'
    uga = 'uga'
    ukr = 'ukr'
    are = 'are'
    gbr = 'gbr'
    usa = 'usa'
    umi = 'umi'
    ury = 'ury'
    uzb = 'uzb'
    vut = 'vut'
    ven = 'ven'
    vnm = 'vnm'
    vgb = 'vgb'
    vir = 'vir'
    wlf = 'wlf'
    esh = 'esh'
    yem = 'yem'
    zmb = 'zmb'
    zwe = 'zwe'


class GeneralEnergyClass(Enum):
    existing = 'existing'
    standard = 'standard'
    advanced = 'advanced'
    unknown = 'unknown'


class ImpactCategoryKey(Enum):
    gwp = 'gwp'
    gwp_fos = 'gwp_fos'
    gwp_bio = 'gwp_bio'
    gwp_lul = 'gwp_lul'
    odp = 'odp'
    ap = 'ap'
    ep = 'ep'
    ep_fw = 'ep_fw'
    ep_mar = 'ep_mar'
    ep_ter = 'ep_ter'
    pocp = 'pocp'
    adpe = 'adpe'
    adpf = 'adpf'
    penre = 'penre'
    pere = 'pere'
    perm = 'perm'
    pert = 'pert'
    penrt = 'penrt'
    penrm = 'penrm'
    sm = 'sm'
    pm = 'pm'
    wdp = 'wdp'
    irp = 'irp'
    etp_fw = 'etp_fw'
    htp_c = 'htp_c'
    htp_nc = 'htp_nc'
    sqp = 'sqp'
    rsf = 'rsf'
    nrsf = 'nrsf'
    fw = 'fw'
    hwd = 'hwd'
    nhwd = 'nhwd'
    rwd = 'rwd'
    cru = 'cru'
    mrf = 'mrf'
    mer = 'mer'
    eee = 'eee'
    eet = 'eet'


class LifeCycleStage(Enum):
    a0 = 'a0'
    a1a3 = 'a1a3'
    a4 = 'a4'
    a5 = 'a5'
    b1 = 'b1'
    b2 = 'b2'
    b3 = 'b3'
    b4 = 'b4'
    b5 = 'b5'
    b6 = 'b6'
    b7 = 'b7'
    b8 = 'b8'
    c1 = 'c1'
    c2 = 'c2'
    c3 = 'c3'
    c4 = 'c4'
    d = 'd'


class Location(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address: Optional[str] = None
    city: Optional[str] = None
    country: Country


class Type(Enum):
    building_info = 'buildingInfo'


class Type1(Enum):
    infrastructure_info = 'infrastructureInfo'


class ProjectInfo2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Type1


class ProjectPhase(Enum):
    strategic_design = 'strategic_design'
    concept_design = 'concept_design'
    technical_design = 'technical_design'
    construction = 'construction'
    post_completion = 'post_completion'
    in_use = 'in_use'
    other = 'other'


class Type2(Enum):
    actual = 'actual'


class Type3(Enum):
    reference = 'reference'


class ReferenceSourceForAssembly2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    format: Optional[str] = None
    overrides: Optional[Dict[str, Any]] = None
    type: Type3
    uri: str
    version: Optional[str] = None


class Type4(Enum):
    actual = 'actual'


class Type6(Enum):
    reference = 'reference'


class ReferenceSourceForImpactDataSource3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    format: Optional[str] = None
    overrides: Optional[Dict[str, Any]] = None
    type: Type6
    uri: str
    version: Optional[str] = None


class Type7(Enum):
    actual = 'actual'


class Type8(Enum):
    reference = 'reference'


class ReferenceSourceForProduct2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    format: Optional[str] = None
    overrides: Optional[Dict[str, Any]] = None
    type: Type8
    uri: str
    version: Optional[str] = None


class RoofType(Enum):
    flat = 'flat'
    pitched = 'pitched'
    saddle = 'saddle'
    pyramid = 'pyramid'
    other = 'other'


class SoftwareInfo(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    calculation_type: Optional[str] = Field(None, alias='calculationType')
    goal_and_scope_definition: Optional[str] = Field(
        None, alias='goalAndScopeDefinition'
    )
    lca_software: str = Field(..., alias='lcaSoftware')


class Source(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str
    url: Optional[str] = None


class Standard(Enum):
    en15804a1 = 'en15804a1'
    en15804a2 = 'en15804a2'
    unknown = 'unknown'


class SubType(Enum):
    generic = 'generic'
    specific = 'specific'
    industry = 'industry'
    representative = 'representative'


class Unit(Enum):
    m = 'm'
    m2 = 'm2'
    m3 = 'm3'
    kg = 'kg'
    tones = 'tones'
    pcs = 'pcs'
    kwh = 'kwh'
    l = 'l'
    m2r1 = 'm2r1'
    km = 'km'
    tones_km = 'tones_km'
    kgm3 = 'kgm3'
    unknown = 'unknown'


class ValueUnit(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    unit: Unit
    value: float


class AreaType(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    definition: str
    unit: Unit
    value: float


class Conversion(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    meta_data: str = Field(..., alias='metaData')
    to: Unit
    value: float


class EPD(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    comment: Optional[str] = None
    conversions: Optional[List[Conversion]] = None
    declared_unit: Unit = Field(..., alias='declaredUnit')
    format_version: str = Field(..., alias='formatVersion')
    id: str
    impacts: Dict[str, Dict[str, Optional[float]]]
    location: Country
    meta_data: Optional[Dict[str, Any]] = Field(None, alias='metaData')
    name: str
    published_date: date = Field(..., alias='publishedDate')
    reference_service_life: Optional[int] = Field(
        None, alias='referenceServiceLife', ge=0
    )
    source: Optional[Source] = None
    standard: Standard
    subtype: SubType
    valid_until: date = Field(..., alias='validUntil')
    version: str


class ProjectInfo1(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    building_completion_year: Optional[int] = Field(
        None, alias='buildingCompletionYear', ge=0
    )
    building_footprint: Optional[ValueUnit] = Field(None, alias='buildingFootprint')
    building_height: Optional[ValueUnit] = Field(None, alias='buildingHeight')
    building_mass: Optional[ValueUnit] = Field(None, alias='buildingMass')
    building_model_scope: Optional[List[BuildingModelScope]] = Field(
        None, alias='buildingModelScope'
    )
    building_permit_year: Optional[int] = Field(None, alias='buildingPermitYear', ge=0)
    building_type: BuildingType = Field(..., alias='buildingType')
    building_typology: List[BuildingTypology] = Field(..., alias='buildingTypology')
    building_users: Optional[int] = Field(None, alias='buildingUsers', ge=0)
    certifications: Optional[List[str]] = None
    energy_demand_electricity: Optional[float] = Field(
        None, alias='energyDemandElectricity'
    )
    energy_demand_heating: Optional[float] = Field(None, alias='energyDemandHeating')
    energy_supply_electricity: Optional[float] = Field(
        None, alias='energySupplyElectricity'
    )
    energy_supply_heating: Optional[float] = Field(None, alias='energySupplyHeating')
    exported_electricity: Optional[float] = Field(None, alias='exportedElectricity')
    floors_above_ground: int = Field(..., alias='floorsAboveGround', ge=0)
    floors_below_ground: Optional[int] = Field(None, alias='floorsBelowGround', ge=0)
    frame_type: Optional[str] = Field(None, alias='frameType')
    general_energy_class: GeneralEnergyClass = Field(..., alias='generalEnergyClass')
    gross_floor_area: Optional[AreaType] = Field(None, alias='grossFloorArea')
    heated_floor_area: Optional[AreaType] = Field(None, alias='heatedFloorArea')
    local_energy_class: Optional[str] = Field(None, alias='localEnergyClass')
    roof_type: RoofType = Field(..., alias='roofType')
    type: Type


class ReferenceSourceForImpactDataSource1(EPD):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Type4


class TechFlow(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    comment: Optional[str] = None
    conversions: Optional[List[Conversion]] = None
    declared_unit: Unit = Field(..., alias='declaredUnit')
    format_version: str = Field(..., alias='formatVersion')
    id: str
    impacts: Dict[str, Dict[str, Optional[float]]]
    location: Country
    meta_data: Optional[Dict[str, Any]] = Field(None, alias='metaData')
    name: str
    source: Optional[Source] = None


class ReferenceSourceForImpactDataSource2(TechFlow):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Type4


class Transport(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    distance: float
    distance_unit: Unit = Field(..., alias='distanceUnit')
    id: str
    impact_data: Union[EPD, TechFlow] = Field(..., alias='impactData')
    life_cycle_stages: List[LifeCycleStage] = Field(..., alias='lifeCycleStages')
    name: str


class ReferenceSourceForProduct1(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[str] = None
    id: str
    impact_data: Union[
        Union[ReferenceSourceForImpactDataSource1, ReferenceSourceForImpactDataSource2],
        ReferenceSourceForImpactDataSource3,
    ] = Field(..., alias='impactData')
    meta_data: Optional[Dict[str, Any]] = Field(None, alias='metaData')
    name: str
    quantity: float
    reference_service_life: int = Field(..., alias='referenceServiceLife', ge=0)
    results: Optional[Dict[str, Any]] = None
    transport: Optional[List[Transport]] = None
    type: Type7
    unit: Unit


class ReferenceSourceForAssembly1(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    classification: Optional[List[Classification]] = None
    comment: Optional[str] = None
    description: Optional[str] = None
    id: str
    meta_data: Optional[Dict[str, Any]] = Field(None, alias='metaData')
    name: str
    products: Dict[str, Union[ReferenceSourceForProduct1, ReferenceSourceForProduct2]]
    quantity: float
    results: Optional[Dict[str, Any]] = None
    type: Type2
    unit: Unit


class Project(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    assemblies: Dict[
        str, Union[ReferenceSourceForAssembly1, ReferenceSourceForAssembly2]
    ]
    classification_system: Optional[str] = Field(None, alias='classificationSystem')
    comment: Optional[str] = None
    description: Optional[str] = None
    format_version: str = Field(..., alias='formatVersion')
    id: str
    impact_categories: List[ImpactCategoryKey] = Field(..., alias='impactCategories')
    lcia_method: Optional[str] = Field(None, alias='lciaMethod')
    life_cycle_stages: List[LifeCycleStage] = Field(..., alias='lifeCycleStages')
    location: Location
    meta_data: Optional[Dict[str, Any]] = Field(None, alias='metaData')
    name: str
    owner: Optional[str] = None
    project_info: Optional[Union[ProjectInfo1, ProjectInfo2]] = Field(
        None, alias='projectInfo'
    )
    project_phase: ProjectPhase = Field(..., alias='projectPhase')
    reference_study_period: Optional[int] = Field(
        None, alias='referenceStudyPeriod', ge=0
    )
    results: Optional[Dict[str, Any]] = None
    software_info: SoftwareInfo = Field(..., alias='softwareInfo')
